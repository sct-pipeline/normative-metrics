#!/bin/bash

# -------------------------------------------------------
# Extract qMRI metrics (FA, MD, AD, RD, MTR, MTsat) from
# individual ROI perlevel between C2 and C5
#
# Usage using SCT v4.3 in parallel mode (defined by -jobs flag) across all subjects:
#	sct_run_batch -jobs -1 -path-data ~/data-multi-subject/ -path-output ~/data-multi-subject_results -continue-on-error 1 -script scripts/extract_normative_metrics.sh
#
# You can run the script only on some subjects, using -include flag.
#
# Manual usage on a single subject (uncommment line with $PATH_RESULTS definition):
#     ./extract_normative_metrics.sh <SUBJECT>
# -------------------------------------------------------

# Immediately exit if error
set -e -o pipefail

# Exit if user presses CTRL+C (Linux) or CMD+C (OSX)
trap "echo Caught Keyboard Interrupt within script. Exiting now.; exit" INT

# Print help, if invalid input
if [[ $1 == "" ]] || [[ $1 == "--help" ]] || [[ $1 == "-h" ]];then

  echo -e "Invalid input. \nRun with SCT v4.3 using sct_run_batch script in parralel mode across all subjects:"
  echo -e "\n\tsct_run_batch -jobs -1 -path-data ~/data-multi-subject/ -path-output ~/data-multi-subject_results/ -continue-on-error 1 -script  scripts/extract_normative_metrics.sh"
  echo -e "\nor on single subject manually (necessary to uncommment line with \$PATH_RESULTS definition):"
  echo -e "\t./extract_normative_metrics.sh <SUBJECT>"

else
  # Retrieve input params ($1 variable is passed from sct_run_batch script or entered manually)
  SUBJECT=$1

  # PATH_RESULTS="~/data-multi-subject_results/results"   # Uncomment this line when run script manually
  # Go to subject results folder ($PATH_RESULTS variable is generated by sct_run_batch script)
  PATH_DATA=$(echo $PATH_RESULTS | sed 's|\(.*\)/.*|\1|')		# delete "/results" from the end of PATH_RESULTS variable
  cd ${PATH_DATA}/data_processed/${SUBJECT}/

  # ROI definition - for details see sct_extract_metric function help or LÃ©vy et al., 2015 paper
  ROI_TO_EXTRACT="50,51,52,53,54,55"
  # 50 - spinal cord
  # 51 - white matter
  # 52 - gray matter
  # 53 - dorsal columns
  # 54 - lateral columns/funiculi
  # 55 - ventral columns/funiculi

  # -------------------------------------------------------
  # DWI
  # -------------------------------------------------------

  # Go to dwi folder where DTI metrics (FA, MD, AD and RD) are located
  cd dwi

  # Compute FA, MD, AD and RD perlevel between C2 and C5

  DWI_METRICS_TO_PROCESS=(
  "FA"
  "MD"
  "AD"
  "RD"
  )

  for metric in ${DWI_METRICS_TO_PROCESS[@]};do
    if [[ -f dti_${metric}.nii.gz ]];then
      sct_extract_metric -i dti_${metric}.nii.gz -f label/atlas -l ${ROI_TO_EXTRACT} -vert 2:5 -perlevel 1 -o ${PATH_RESULTS}/DWI_${metric}_perlevel.csv -append 1
    else
      echo "File ${PATH_RESULTS}/data_processed/${SUBJECT}/dwi/dti_${metric}.nii.gz does not exist."  # this prints only to log - TODO: print this also to terminal to inform user?
    fi
  done

  # -------------------------------------------------------
  # Magnetic transfer
  # -------------------------------------------------------
  # Go to anat folder MTR and MTsat metrics are located
  cd ../anat

  # Compute MTR and MTsat perlevel between C2 and C5
  MT_METRICS_TO_PROCESS=(
  "MTR"
  "MTsat"
  )

  for metric in ${MT_METRICS_TO_PROCESS[@]};do

    metric_lowercase=$(echo $metric | tr '[:upper:]' '[:lower:]')   # convert to lowercase due to .nii.gz files

    if [[ -f ${metric_lowercase}.nii.gz ]];then
      sct_extract_metric -i ${metric_lowercase}.nii.gz -f label_axT1w/atlas -l ${ROI_TO_EXTRACT} -vert 2:5 -vertfile label_axT1w/template/PAM50_levels.nii.gz -perlevel 1 -o ${PATH_RESULTS}/${metric}_perlevel.csv -append 1
    else
      echo "File ${PATH_RESULTS}/data_processed/${SUBJECT}/anat/${metric_lowercase}.nii.gz does not exist." # this prints only to log - TODO: print this also to terminal to inform user?
    fi
  done

fi
